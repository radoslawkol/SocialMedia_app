* {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
}
:root {
	--primary-background: #eeeeee;
	--secondary-background: #fff;
	--green-background: #18d837;
	--green-background-rgb: #18d838eb;
	--backdrop-color: rgba(218, 214, 214, 0.841);
	--border-grey: 1px solid rgb(148, 147, 147);
	--primary-color: #323232;
	--secondary-color: #8f00ff;
	--secondary-color-rgba: #9000ffe1;
	--white-color: #fff;
	--white-background: #fff;
}

.dark {
	--primary-background: #333;
	--secondary-background: rgb(20, 19, 19);
	--primary-color: #ebe7e7;
	--secondary-color: #8f00ff;
	--secondary-color-rgba: #9000ffe1;
	--white-background: rgb(17, 17, 17);
	--backdrop-color: rgba(38, 36, 36, 0.872);
	--border-grey: 1px solid rgb(53, 52, 52);
	--green-background: #18d837;
	--green-background-rgb: #18d838db;
}

html {
	font-size: 62.5%;
}

body {
	font-family: "Roboto", "sans-serif";
}

.slick-slide > div {
	margin: 0 10px;
}
.slick-list {
	margin: 0 -10px;
}

.slick-dots {
	transform: translateX(-20px);
	@media (min-width: "982px") {
		transform: translateX(-40px);
	}
}

.emoji-picker-react .emoji-group:before {
	background: var(--primary-background) !important;
}
.emoji-picker-react input.emoji-search {
	background: var(--secondary-background) !important;
	color: var(--primary-color) !important;
}

.btn {
	border: none;
	border-radius: 20px;
	padding: 1rem;
	&--purple {
		background-color: var(--secondary-color);
		color: var(--white-color);
		transition: background-color 0.3s transform 0.3s;
		&:hover {
			transform: scale(0.98);
			background-color: var(--secondary-color-rgba);
		}
	}
	&--green {
		background-color: var(--green-background);
		color: var(--white-color);
		transition: background-color 0.3s transform 0.3s;
		&:hover {
			transform: scale(0.98);
			background-color: var(--green-background-rgb);
		}
	}
	&:hover {
		cursor: pointer;
	}
}

.errorText {
	margin-top: 2rem;
	text-align: center;
	font-size: 1.6rem;
	font-weight: bold;
	color: red;
}

.loader {
	margin-top: 2rem;
	text-align: center;
}

.success {
	margin-top: 2rem;
	text-align: center;
	font-size: 1.6rem;
	color: var(--green-background);
}

.backdrop {
	position: fixed;
	display: flex;
	justify-content: center;
	align-items: center;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background-color: var(--backdrop-color);
	backdrop-filter: blur(3px);
	z-index: 2000;
}

.reactEasyCrop_CropAreaGrid {
	width: 100% !important;
	height: 100% !important;
}

$breakpoints: (
	"small": (
		min-width: 576px,
	),
	"medium": (
		min-width: 776px,
	),
	"large": (
		min-width: 992px,
	),
	"medium-large": (
		min-width: 1200px,
	),
	"extra-large": (
		min-width: 1400px,
	),
	"big": (
		min-width: 1600px,
	),
);

@mixin media-size($breakpoint) {
	@if map-has-key($breakpoints, $breakpoint) {
		@media #{inspect(map-get($breakpoints, $breakpoint))} {
			@content;
		}
	} @else {
		@warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
	}
}
